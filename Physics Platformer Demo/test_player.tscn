[gd_scene load_steps=5 format=3 uid="uid://b76cxogw2yqyl"]

[ext_resource type="PackedScene" uid="uid://c1et41fjvsa3x" path="res://projectile.tscn" id="1_if3pt"]

[sub_resource type="GDScript" id="GDScript_m2cwo"]
script/source = "extends CharacterBody3D

var speed = 450
var gravHook = 100
const MOVE_SPEED = 7
const JUMP_FORCE = 8.5
const GRAVITY = 20
const MAX_FALL_SPEED = 30
const DASH_FORCE = 20
const DASH_DURATION = 0.2
const GRAPPLE_SPEED = 20
const SWING_RADIUS = 5.0
const SWING_SPEED = 2.0

var projectile_speed = 20.0
var y_velo = 0
var facing_right = true
var is_jumping = false
var is_dashing = false
var dash_timer = 0
var dash_direction = Vector3.ZERO
var custom_velocity = Vector3()
var hook_pos = Vector3()
var hooked = false
var grapple_direction = Vector3()
var grapple_timer = 0
var grapple_duration = 1.0
var swing_angle = 0.0

var line_mesh: ImmediateMesh
var line_material: StandardMaterial3D

var cursor_position = Vector3()
var projectile_path = []
var projectile_hit = false

func _ready():
	# Create the line mesh and material
	line_mesh = ImmediateMesh.new()
	line_material = StandardMaterial3D.new()
	line_material.vertex_color_use_as_albedo = true
	
	# Add the line mesh to the scene
	var line_mesh_instance = MeshInstance3D.new()
	line_mesh_instance.mesh = line_mesh
	line_mesh_instance.material_override = line_material
	add_child(line_mesh_instance)

func gravity():
	custom_velocity.y += gravHook
	custom_velocity.x += gravHook

func _process(delta):
	if hooked:
		# Clear the line mesh
		line_mesh.clear_surfaces()
		
		# Begin drawing the line
		line_mesh.surface_begin(Mesh.PRIMITIVE_LINES)
		
		# Add the start and end points of the line
		var start_pos = global_transform.origin
		var end_pos = hook_pos
		line_mesh.surface_add_vertex(start_pos)
		line_mesh.surface_add_vertex(end_pos)
		
		# Set the line color
		line_mesh.surface_set_color(Color.BLACK)
		line_mesh.surface_set_color(Color.BLACK)
		
		# End drawing the line
		line_mesh.surface_end()
	else:
		# Clear the line mesh when not hooked
		line_mesh.clear_surfaces()
	
	# Update cursor position
	var camera = get_viewport().get_camera_3d()
	var mouse_position = get_viewport().get_mouse_position()
	var ray_origin = camera.project_ray_origin(mouse_position)
	var ray_normal = camera.project_ray_normal(mouse_position)
	var space_state = get_world_3d().direct_space_state
	
	var ray_params = PhysicsRayQueryParameters3D.new()
	ray_params.from = ray_origin
	ray_params.to = ray_origin + ray_normal * 1000
	ray_params.collide_with_areas = true
	ray_params.collide_with_bodies = true
	
	var collision = space_state.intersect_ray(ray_params)
	if collision:
		cursor_position = collision.position
	else:
		cursor_position = ray_origin + ray_normal * 1000
	# Draw projectile path
	if projectile_path.size() > 1:
		line_mesh.clear_surfaces()
		line_mesh.surface_begin(Mesh.PRIMITIVE_LINES)
		for i in range(projectile_path.size() - 1):
			line_mesh.surface_add_vertex(projectile_path[i])
			line_mesh.surface_add_vertex(projectile_path[i + 1])
			line_mesh.surface_set_color(Color.RED)
			line_mesh.surface_set_color(Color.RED)
		line_mesh.surface_end()

func _physics_process(delta):
	gravity()
	hook()
	
	if hooked:
		grapple(delta)
	else:
		var move_dir = Input.get_axis(\"move_left\", \"move_right\")
		if not is_dashing:
			custom_velocity.x = move_dir * MOVE_SPEED
			if move_dir != 0:
				dash_direction = Vector3(move_dir, 0, 0)
				facing_right = move_dir > 0
		
		if is_on_floor():
			y_velo = -0.1
			is_jumping = false
			if Input.is_action_just_pressed(\"jump\"):
				y_velo = JUMP_FORCE
				is_jumping = true
		else:
			y_velo -= GRAVITY * delta
			y_velo = max(y_velo, -MAX_FALL_SPEED)
		
		if Input.is_action_just_pressed(\"dash\") and not is_dashing and dash_direction != Vector3.ZERO:
			dash()
		
		if is_dashing:
			dash_timer += delta
			if dash_timer >= DASH_DURATION:
				is_dashing = false
				dash_timer = 0
		
		custom_velocity.y = y_velo
	
	velocity = custom_velocity
	move_and_slide()

func dash():
	is_dashing = true
	custom_velocity = dash_direction * DASH_FORCE

func hook():
	if Input.is_action_just_pressed(\"grapple\"):
		var camera = get_viewport().get_camera_3d()
		var mouse_position = get_viewport().get_mouse_position()
		var ray_origin = camera.project_ray_origin(mouse_position)
		var ray_normal = camera.project_ray_normal(mouse_position)
		var space_state = get_world_3d().direct_space_state

		var ray_params = PhysicsRayQueryParameters3D.new()
		ray_params.from = global_position
		ray_params.to = global_position + ray_normal * 1000
		ray_params.collide_with_areas = true
		ray_params.collide_with_bodies = true

		var collision = space_state.intersect_ray(ray_params)

		var projectile = preload(\"res://projectile.tscn\").instantiate()
		projectile.global_position = global_position
		get_parent().add_child(projectile)
		
		if collision:
			var target_position = collision.position
			var direction = (target_position - global_position).normalized()
			projectile.linear_velocity = direction * projectile_speed
		else:
			var direction = ray_normal
			projectile.linear_velocity = direction * projectile_speed

		projectile_path = []
		projectile_hit = false
	else:
		hooked = false

func grapple(delta):
	grapple_timer += delta
	
	if grapple_timer < grapple_duration:
		# Calculate the swing motion
		swing_angle += SWING_SPEED * delta
		
		var swing_offset = Vector3(
			sin(swing_angle) * SWING_RADIUS,
			-cos(swing_angle) * SWING_RADIUS,
			0
		)
		
		var start_pos = hook_pos
		var end_pos = hook_pos + swing_offset
		
		custom_velocity = (end_pos - global_position) * GRAPPLE_SPEED
	else:
		custom_velocity = Vector3.ZERO
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_rvl8c"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_qthqe"]

[node name="test_player" type="CharacterBody3D"]
axis_lock_linear_z = true
script = SubResource("GDScript_m2cwo")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.00934, 0)
shape = SubResource("CapsuleShape3D_rvl8c")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.00564, 0)
mesh = SubResource("CapsuleMesh_qthqe")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.23472, 9.65786)

[node name="Grapplehook" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
target_position = Vector3(0, 5, 0)

[node name="GrappleRaycast" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(-4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0, 1, 1, 0.25, 0)
target_position = Vector3(0, 10, 0)

[node name="GrappleRaycast2" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.173648, 0.984808, 0, -0.984808, 0.173648, 0, 0, 0, 1, 1, 0.5, 0)
target_position = Vector3(0, 10, 0)

[node name="GrappleRaycast5" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.34202, 0.939693, 0, -0.939693, 0.34202, 0, 0, 0, 1, 1, 0.75, 0)
target_position = Vector3(0, 10, 0)

[node name="GrappleRaycast6" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.5, 0.866025, 0, -0.866025, 0.5, 0, 0, 0, 1, 1, 1, 0)
target_position = Vector3(0, 10, 0)

[node name="GrappleRaycast3" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, -1, 0.25, 0)
target_position = Vector3(0, 10, 0)

[node name="GrappleRaycast4" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.173648, -0.984808, 0, 0.984808, 0.173648, 0, 0, 0, 1, -1, 0.5, 0)
target_position = Vector3(0, 10, 0)

[node name="GrappleRaycast7" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.34202, -0.939693, 0, 0.939693, 0.34202, 0, 0, 0, 1, -1, 0.75, 0)
target_position = Vector3(0, 10, 0)

[node name="GrappleRaycast8" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.5, -0.866025, 0, 0.866025, 0.5, 0, 0, 0, 1, -1, 1, 0)
target_position = Vector3(0, 10, 0)

[node name="Projectile" parent="." instance=ExtResource("1_if3pt")]
