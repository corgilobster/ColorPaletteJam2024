[gd_scene load_steps=5 format=3 uid="uid://b76cxogw2yqyl"]

[ext_resource type="PackedScene" uid="uid://c1et41fjvsa3x" path="res://projectile.tscn" id="1_if3pt"]

[sub_resource type="GDScript" id="GDScript_m2cwo"]
resource_local_to_scene = true
script/source = "extends CharacterBody3D

const MOVE_SPEED = 7
const JUMP_FORCE = 8.5
const GRAVITY = 20
const MAX_FALL_SPEED = 30
const DASH_FORCE = 10
const DASH_DURATION = 0.2
const GRAPPLE_SPEED = 10
const GRAPPLE_MAX_SPEED = 20
const SWING_FORCE = 10
const SWING_DAMPING = 0.05
const SWING_FALL_SPEED = 5

var y_velo = 0
var facing_right = true
var is_jumping = false
var is_dashing = false
var dash_timer = 0
var dash_direction = Vector3.ZERO
var custom_velocity = Vector3()
var hook_pos = Vector3()
var hooked = false
var grapple_direction = Vector3()
var swing_velocity = Vector3.ZERO
var jump_count = 0

var grapple_line: MeshInstance3D
var projectile_scene = preload(\"res://projectile.tscn\")

func _ready():
	setup_grapple_line()

func _process(delta):
	update_grapple_line()

func _physics_process(delta):
	handle_movement(delta)
	handle_grapple(delta)

func handle_movement(delta):
	var move_dir = Input.get_axis(\"move_left\", \"move_right\")
	if not is_dashing and not hooked:
		custom_velocity.x = move_dir * MOVE_SPEED

	update_facing_direction()

	if is_on_floor():
		reset_jump()
		if Input.is_action_just_pressed(\"jump\"):
			jump()
	else:
		apply_gravity(delta)
		handle_double_jump()

	if Input.is_action_just_pressed(\"dash\") and not is_dashing and not hooked:
		dash()

	update_dash(delta)

	custom_velocity.y = y_velo
	velocity = custom_velocity
	move_and_slide()

func update_facing_direction():
	var mouse_position = get_viewport().get_mouse_position()
	var screen_center_x = get_viewport().size.x / 2
	facing_right = mouse_position.x > screen_center_x

func reset_jump():
	y_velo = -0.1
	is_jumping = false
	jump_count = 0

func jump():
	y_velo = JUMP_FORCE
	is_jumping = true
	jump_count += 1

func apply_gravity(delta):
	y_velo -= GRAVITY * delta
	y_velo = max(y_velo, -MAX_FALL_SPEED)

func handle_double_jump():
	if Input.is_action_just_pressed(\"jump\") and jump_count < 2:
		jump()

func dash():
	is_dashing = true
	dash_direction = 1 if facing_right else -1
	custom_velocity = Vector3(DASH_FORCE * dash_direction, 0, 0)

func update_dash(delta):
	if is_dashing:
		dash_timer += delta
		if dash_timer >= DASH_DURATION:
			is_dashing = false
			dash_timer = 0

func setup_grapple_line():
	grapple_line = MeshInstance3D.new()
	var immediate_mesh = ImmediateMesh.new()
	var material = StandardMaterial3D.new()
	material.albedo_color = Color.WHITE
	grapple_line.mesh = immediate_mesh
	add_child(grapple_line)

func update_grapple_line():
	if hooked:
		var start_pos = hook_pos
		var end_pos = global_transform.origin
		
		var immediate_mesh = grapple_line.mesh as ImmediateMesh
		immediate_mesh.clear_surfaces()
		immediate_mesh.surface_begin(Mesh.PRIMITIVE_LINES)
		immediate_mesh.surface_add_vertex(start_pos)
		immediate_mesh.surface_add_vertex(end_pos)
		immediate_mesh.surface_end()
		
		grapple_line.visible = true
	else:
		grapple_line.visible = false

func handle_grapple(delta):
	if Input.is_action_just_pressed(\"grapple\") and not hooked:
		shoot_grapple()
	
	if hooked:
		grapple_movement(delta)
		if Input.is_action_just_released(\"grapple\"):
			detach_grapple()

func shoot_grapple():
	var closest_raycast = find_closest_raycast()
	if closest_raycast:
		var projectile = projectile_scene.instantiate()
		projectile.global_position = closest_raycast.global_transform.origin
		var collision_point = closest_raycast.get_collision_point()
		var direction = (collision_point - closest_raycast.global_transform.origin).normalized()
		projectile.linear_velocity = direction * projectile.speed
		projectile.gravity_scale = 0
		projectile.connect(\"collided\", Callable(self, \"_on_projectile_collided\"))
		get_tree().current_scene.add_child(projectile)

func find_closest_raycast():
	var grapplehook = get_node(\"Grapplehook\")
	var camera = get_viewport().get_camera_3d()
	var mouse_position = get_viewport().get_mouse_position()
	var closest_raycast = null
	var closest_distance = INF
	
	for raycast in grapplehook.get_children():
		if raycast is RayCast3D:
			var screen_pos = camera.unproject_position(raycast.global_transform.origin)
			var distance = screen_pos.distance_to(mouse_position)
			
			var is_allowed_side = false
			if facing_right and raycast.name in [\"GrappleRayCast90 right\", \"GrappleRaycast80right\", \"GrappleRaycast70 right\", \"GrappleRaycast60right\"]:
				is_allowed_side = true
			elif not facing_right and raycast.name in [\"grappleRayCast90 left\", \"GrappleRaycast4\", \"GrappleRaycast7\", \"GrappleRaycast8\"]:
				is_allowed_side = true
			
			if is_allowed_side and distance < closest_distance and raycast.is_colliding():
				closest_raycast = raycast
				closest_distance = distance
	
	return closest_raycast

func _on_projectile_collided(collision):
	var collider = collision.get_collider()
	if collider != self:
		hook_pos = collision.get_position()
		grapple_direction = (hook_pos - global_position).normalized()
		hooked = true
		
		var immediate_mesh = grapple_line.mesh as ImmediateMesh
		immediate_mesh.clear_surfaces()
		immediate_mesh.surface_begin(Mesh.PRIMITIVE_LINES)
		immediate_mesh.surface_add_vertex(hook_pos)
		immediate_mesh.surface_add_vertex(collision.get_position())
		immediate_mesh.surface_end()
		
		grapple_line.visible = true

func grapple_movement(delta):
	var hook_direction = (hook_pos - global_position).normalized()
	var local_swing_direction = Vector3(Input.get_axis(\"move_left\", \"move_right\"), 0, 0)
	
	var swing_force = local_swing_direction * SWING_FORCE
	swing_velocity += swing_force * delta
	swing_velocity = lerp(swing_velocity, Vector3.ZERO, SWING_DAMPING)
	
	var hook_velocity = hook_direction * GRAPPLE_SPEED
	custom_velocity = swing_velocity + hook_velocity
	
	if custom_velocity.length() > GRAPPLE_MAX_SPEED:
		custom_velocity = custom_velocity.normalized() * GRAPPLE_MAX_SPEED
	
	custom_velocity.y -= SWING_FALL_SPEED * delta
	global_position += custom_velocity * delta

func detach_grapple():
	hooked = false
	swing_velocity = Vector3.ZERO
	set_physics_process(true)
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_rvl8c"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_qthqe"]

[node name="test_player" type="CharacterBody3D"]
axis_lock_linear_z = true
script = SubResource("GDScript_m2cwo")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.00934, 0)
shape = SubResource("CapsuleShape3D_rvl8c")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.00564, 0)
mesh = SubResource("CapsuleMesh_qthqe")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.23472, 9.65786)

[node name="Grapplehook" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
enabled = false
target_position = Vector3(0, 5, 0)

[node name="GrappleRayCast90 right" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(-4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0, 1, 1, 0.25, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast80right" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.173648, 0.984808, 0, -0.984808, 0.173648, 0, 0, 0, 1, 1, 0.5, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast70 right" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.34202, 0.939693, 0, -0.939693, 0.34202, 0, 0, 0, 1, 1, 0.75, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast60right" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.5, 0.866025, 0, -0.866025, 0.5, 0, 0, 0, 1, 1, 1, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast50right2" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.642787, 0.766044, 0, -0.766044, 0.642787, 0, 0, 0, 1, 1, 1.25, 0)
target_position = Vector3(0, 12, 0)

[node name="grappleRayCast90 left" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, -1, 0.25, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast4" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.173648, -0.984808, 0, 0.984808, 0.173648, 0, 0, 0, 1, -1, 0.5, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast7" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.34202, -0.939693, 0, 0.939693, 0.34202, 0, 0, 0, 1, -1, 0.75, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast8" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.5, -0.866025, 0, 0.866025, 0.5, 0, 0, 0, 1, -1, 1, 0)
target_position = Vector3(0, 12, 0)

[node name="GrappleRaycast9" type="RayCast3D" parent="Grapplehook"]
transform = Transform3D(0.499999, -0.866024, 0, 0.866024, 0.499999, 0, 0, 0, 1, -1, 1, 0)
target_position = Vector3(0, 12, 0)

[node name="Projectile" parent="." instance=ExtResource("1_if3pt")]

[node name="MeshInstance3D" parent="Projectile" index="1"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.34372, 1.48517, 0)

[editable path="Projectile"]
